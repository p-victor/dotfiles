#!/usr/bin/env bash

set -e

skip_system_packages="${1}"

os_type="$(uname -s)"

# Keep zsh as last package in the list for apt_packages so that install message makes sense 
apt_packages="curl git iproute2 python3-pip tmux nano wl-clipboard shellcheck zsh"
apt_packages_optional="htop"

old_dir="dotfiles_old"

config_files=".bash_profile .bashrc .zshenv .config/zsh/.zshrc .config/zsh/.zprofile .config/zsh/.aliases .gitconfig .gitconfig.user .tmux.conf"

###############################################################################
# Detect OS and distro type
###############################################################################

function no_system_packages() {
cat << EOF
System package installation isn't supported with your OS / distro.

You can re-run the script and explicitly skip installing system packages:

    bash <(curl -sS https://raw.githubusercontent.com/p-victor/dotfiles/master/install) --skip-system-packages
EOF

exit 1
}

case "${os_type}" in
    Linux*)
        os_type="Linux"

        if [ !  -f "/etc/debian_version" ]; then
            [ -z "${skip_system_packages}" ] && no_system_packages
        fi

        ;;
    *)
        os_type="Other"

        [ -z "${skip_system_packages}" ] && no_system_packages

        ;;
esac

###############################################################################
# Install packages using your OS' package manager
###############################################################################

function apt_install_packages {
    sudo apt-get update && sudo apt-get install -y ${apt_packages} ${apt_packages_optional}
}

function display_packages {
    if [ "${os_type}" == "Linux" ]; then
        echo "${apt_packages} ${apt_packages_optional}"
    else
        echo "Error!"
    fi
}

if [ -z "${skip_system_packages}" ]; then
cat << EOF

If you choose yes, all of the system packages below will be installed:

$(display_packages)

If you choose no, the above packages will not be installed and this script
will exit. This gives you a chance to edit the list of packages if you don't
agree with any of the decisions.

The packages listed after zsh are technically optional but are quite useful.

EOF
    while true; do
        read -rp "Do you want to install the above packages? (y/n) " yn
        case "${yn}" in
            [Yy]*)
                if [ "${os_type}" == "Linux" ]; then
                    apt_install_packages
                fi

                break;;
            [Nn]*) exit 0;;
            *) echo "Please answer y or n";;
        esac
    done
else
    echo "System package installation was skipped!"
fi

echo

###############################################################################
# Backup old configs
###############################################################################

function display_old_files {
    for config_file in $config_files; do
        if [ -e "${HOME}/${config_file}" ]; then
            echo "${HOME}/${config_file}"
        fi
    done
}

function backup_old_files {
    for config_file in $config_files; do
        if [ -e "${HOME}/$config_file" ]; then
            dirname="$(dirname $config_file)";
            basename="$(basename $config_file)";
            echo "Moving ${HOME}/$config_file to ${HOME}/$old_dir/$current_time/$config_file"
            mkdir -p ${HOME}/$old_dir/$current_time/$dirname
            mv ${HOME}/$config_file ${HOME}/$old_dir/$current_time/$config_file
        fi
    done
}

current_time=$(date "+%Y-%m-%d_%H-%M-%S")

if [ -n "$(display_old_files)" ]; then
cat << EOF

If you choose yes, all the files bellow will be backed up to this location ${HOME}/$old_dir/$current_time/:

$(display_old_files)

If you choose no, the files will be overwritten without backup.

EOF
    while true; do
        read -rp "Backup old dotfiles? (y/n) " yn
        case "${yn}" in
            [Yy]*)
                    backup_old_files
                
                break;;
            [Nn]*) 
                break;;
            *) echo "Please answer y or n";;
        esac
    done
fi
echo

###############################################################################
# Clone dotfiles
###############################################################################

read -rep $'\nWhere do you want to clone these dotfiles to [~/dotfiles]? ' clone_path
clone_path="${clone_path:-"${HOME}/dotfiles"}"

# Ensure path doesn't exist.
while [ -e "${clone_path}" ]; do
    read -rep $'\nPath exists, try again? (y) ' y
    case "${y}" in
        [Yy]*)

            break;;
        *) echo "Please answer y or CTRL+c the script to abort everything";;
    esac
done

echo

git clone https://github.com/p-victor/dotfiles "${clone_path}"

###############################################################################
# Carefully create symlinks
###############################################################################

function display_symlinks {
    for config_file in $config_files; do
        if [ -f "${clone_path}/${config_file}" ]; then
            echo "ln -fs "${clone_path}/${config_file}" "${HOME}/${config_file}""
        fi
    done
}

function create_symlinks {
    for config_file in $config_files; do
        if [ -f "${clone_path}/${config_file}" ]; then
            dirname="$(dirname $config_file)";
            mkdir -p ${HOME}/$dirname
            ln -fs "${clone_path}/${config_file}" "${HOME}/${config_file}"
        fi
    done
}

cat << EOF

-------------------------------------------------------------------------------

$(display_symlinks)

# And if you happen to be using WSL:
sudo ln -fs "${clone_path}/etc/wsl.conf" /etc/wsl.conf

-------------------------------------------------------------------------------

A potentially dangerous action is about to happen. The above files are going to
get forcefully symlinked.

What does that mean?

Any config files you have on the right hand side of the paths are going to get
overwritten with the files that come with my dotfiles (left side).

If you care about your original config files now would be the time to back
them up. They will ALL be overwritten if you say yes to the prompt below.
EOF

while true; do
  read -rep $'\nReady to continue and apply the symlinks? (y) ' y
  case "${y}" in
      [Yy]*)

          break;;
      *) echo "Please answer y or CTRL+c the script to abort everything";;
  esac
done

if grep -qE "(Microsoft|microsoft|WSL)" /proc/version &>/dev/null; then
    sudo ln -fs "${clone_path}/etc/wsl.conf" /etc/wsl.conf
fi

create_symlinks

echo

###############################################################################
# Install tpm (tmux plugin manager)
###############################################################################

if hash tmux 2>/dev/null; then
    rm -rf "${HOME}/.tmux/plugins/tpm"
    git clone --depth 1 https://github.com/tmux-plugins/tpm "${HOME}/.tmux/plugins/tpm"
    echo "Installing tpm..."
else
    echo "Not installing tpm because tmux is not installed..."
fi 

echo

###############################################################################
# Install tmux plugins
###############################################################################

# printf "\n\nInstalling tmux plugins...\n"
# 
# export TMUX_PLUGIN_MANAGER_PATH="${HOME}/.tmux/plugins"
# "${HOME}/.tmux/plugins/tpm/bin/install_plugins"
# 
# echo

###############################################################################
# Install fzf (fuzzy finder on the terminal)
###############################################################################

rm -rf "${HOME}/.local/share/fzf"
git clone --depth 1 https://github.com/junegunn/fzf.git "${HOME}/.local/share/fzf" \
  && yes | "${HOME}/.local/share/fzf/install" --bin --no-update-rc

echo

###############################################################################
# Change default shell to zsh
###############################################################################

chsh -s "$(command -v zsh)"

# shellcheck disable=SC1091
source "${HOME}/.config/zsh/.zprofile"

###############################################################################
# Install Oh-my-zsh
###############################################################################

sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended --keep-zshrc

###############################################################################
# Done!
###############################################################################

cat << EOF
Everything was installed successfully!

You can safely close this terminal.

The next time you open your terminal zsh will be ready to go!
EOF

exit 0