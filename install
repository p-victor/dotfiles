#!/usr/bin/env bash

set -e

skip_system_packages="${1}"

os_type="$(uname -s)"
current_time=$(date "+%d-%m-%Y_%H:%M:%S")


# Keep zsh as last package in the list for apt_packages so that install message makes sense 
apt_packages="curl git iproute2 python3-pip tmux nano neovim wl-clipboard shellcheck fd-find zsh zsh-antigen"
apt_packages_optional="htop"

old_dir="dotfiles_old"

xdg_directories=".config .local/share .local/state .cache"

config_files=".profile .zshenv .config/zsh .config/tmux .config/tmux-powerline .config/git .config/bash .config/nvim .config/profile"

###############################################################################
# Functions
###############################################################################

function no_system_packages() {
cat << EOF
System package installation isn't supported with your OS / distro.

You can re-run the script and explicitly skip installing system packages:

    bash <(curl -sS https://raw.githubusercontent.com/p-victor/dotfiles/master/install) --skip-system-packages
EOF

exit 1
}

function verify_os() {
    case "${os_type}" in
        Linux*)
            os_type="Linux"

            if [ !  -f "/etc/debian_version" ]; then
                [ -z "${skip_system_packages}" ] && no_system_packages
            fi

            ;;
        *)
            os_type="Other"

            [ -z "${skip_system_packages}" ] && no_system_packages

            ;;
    esac
}

function apt_install_system_packages() {
    sudo apt-get update && sudo apt-get install -y ${apt_packages} ${apt_packages_optional}
}

function display_packages() {
    if [ "${os_type}" == "Linux" ]; then
        echo -e "Mandatory: ${apt_packages}\n\nOptional: ${apt_packages_optional}"
    else
        echo "Error!"
    fi
}

function prompt_install_system_packages() {
if [ -z "${skip_system_packages}" ]; then
cat << EOF

If you choose yes, all of the system packages below will be installed:

$(display_packages)

If you choose no, the above packages will not be installed and this script
will exit. This gives you a chance to edit the list of packages if you don't
agree with any of the decisions.

EOF

    while true; do
        read -rp "Do you want to install the above packages? (y/n) " yn
        case "${yn}" in
            [Yy]*)
                if [ "${os_type}" == "Linux" ]; then
                    apt_install_system_packages
                fi

                break;;
            [Nn]*) exit 0;;
            *) echo "Please answer y or n";;
        esac
    done
else
    echo "System package installation was skipped!"
fi
}

function display_old_files {
    for config_file in $config_files; do
        if [ -e "${HOME}/${config_file}" ]; then
            echo "${HOME}/${config_file}"
        fi
    done
}

function backup_old_files {
    for config_file in $config_files; do
        if [ -e "${HOME}/$config_file" ]; then
            echo "Moving ${HOME}/$config_file to ${HOME}/$old_dir/$current_time/$config_file"
            mkdir -p "${HOME}/$old_dir/$current_time"
            cp -Lrt "${HOME}/$old_dir/$current_time/" "${HOME}/$config_file" 
        fi
    done
}

function prompt_backup_configs() {
if [ -n "$(display_old_files)" ]; then
cat << EOF

If you choose yes, all the files bellow will be backed up to this location ${HOME}/$old_dir/$current_time/:

$(display_old_files)

If you choose no, the files will be overwritten without backup.

EOF
    while true; do
        read -rp "Backup old dotfiles? (y/n) " yn
        case "${yn}" in
            [Yy]*)
                    backup_old_files
                
                break;;
            [Nn]*) 
                break;;
            *) echo "Please answer y or n";;
        esac
    done
fi
echo
}

function prompt_clone_dotfiles() {
read -rep $'\nWhere do you want to clone the new dotfiles to (can be anywhere, Default: [~/dotfiles])? ' clone_path
clone_path="${clone_path:-"${HOME}/dotfiles"}"
echo

# Ensure path doesn't exist.
if [ -e "${clone_path}" ]; then
    if git -C "${clone_path}" rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        while true; do
            echo "Path exists and is a git repository, choose an option:"
            echo "1) Pull dotfiles"
            echo "2) Overwrite dotfiles"
            echo
            echo "a) Abort and go back to the menu"
            echo "q) Quit"
            read -rep $'\nChoose an option: ' option
            echo
            case "${option}" in
                [1]*)
                    echo
                    echo "Pulling dotfiles in ${clone_path}..."
                    git -C "${clone_path}" pull
                    break;;
                [2]*)
                    sudo rm -r ${clone_path}
                    echo
                    echo "Cloning dotfiles to ${clone_path}"
                    git clone git@github.com:p-victor/dotfiles.git "${clone_path}"
                    break;;
                [aA]*)
                    menu
                    break;;
                [Qq]*)
                    echo "Exiting ..."
                    exit;;
                *) echo "Please enter a valid answer";;
            esac
        done
    else
        while true; do
            read -rep $'\nPath exists, overwrite? (yn) ' option
            echo
            case "${option}" in
                [Yy]*)
                    sudo rm -r ${clone_path}
                    echo
                    echo "Cloning dotfiles to ${clone_path}"
                    git clone git@github.com:p-victor/dotfiles.git "${clone_path}"
                    break;;
                [Nn]*) 
                    echo "Exiting ..."
                    exit;;
                *) echo "Please answer y, n or CTRL+c the script to abort everything";;
            esac
        done
    fi
else
    echo
    echo "Cloning dotfiles to ${clone_path}"
    git clone git@github.com:p-victor/dotfiles.git "${clone_path}"
fi
}

function display_symlinks {
    for config_file in $config_files; do
        if [ -e "${clone_path}/${config_file}" ]; then
            echo "ln -fs "${clone_path}/${config_file}" "${HOME}/${config_file}""
        fi
    done
}

function create_symlinks {
    for config_file in $config_files; do
        if [ -e "${clone_path}/${config_file}" ]; then
            dirname="$(dirname $config_file)";
            mkdir -p "${HOME}/$dirname"
            rm -rf "${HOME}/${config_file}"
            echo "ln -fs "${clone_path}/${config_file}" "${HOME}/${config_file}""
            ln -fs "${clone_path}/${config_file}" "${HOME}/${config_file}"
        fi
    done
}

function prompt_create_symlinks() {
cat << EOF

-------------------------------------------------------------------------------

$(display_symlinks)

# And if you happen to be using WSL:
sudo ln -fs "${clone_path}/etc/wsl.conf" /etc/wsl.conf

-------------------------------------------------------------------------------

A potentially dangerous action is about to happen. The above files are going to
get forcefully symlinked.

What does that mean?

Any config files you have on the right hand side of the paths are going to get
overwritten with the files that come with my dotfiles (left side).

If you care about your original config files now would be the time to back
them up. They will ALL be overwritten if you say yes to the prompt below.
EOF

while true; do
  read -rep $'\nReady to continue and apply the symlinks? (y) ' y
  case "${y}" in
      [Yy]*)
          break;;
      *) echo "Please answer y or CTRL+c the script to abort everything";;
  esac
done

create_symlinks

if grep -qE "(Microsoft|microsoft|WSL)" /proc/version &>/dev/null; then
    echo "ln -fs "${clone_path}/etc/wsl.conf" "/etc/wsl.conf""
    sudo ln -fs "${clone_path}/etc/wsl.conf" /etc/wsl.conf
fi

echo
}

function create_xdg_directories() {
    for xdg_directory in $xdg_directories; do
        if [ ! -d "${HOME}/${xdg_directory}" ]; then
            mkdir -p "${HOME}/${xdg_directory}"
        fi
    done
    source "${HOME}/.config/profile/.profile"
}

function install_tpm() {
echo
echo "Installing tpm..."
echo

if hash tmux 2>/dev/null; then
    rm -rf "${HOME}/.config/tmux/plugins/tpm"
    git clone --depth 1 https://github.com/tmux-plugins/tpm "${HOME}/.config/tmux/plugins/tpm"
    echo "Installing tpm..."
else
    echo "Not installing tpm because tmux is not installed..."
fi 

echo
echo "Finished installing tpm!"
echo
}

function install_fzf() {
echo
echo "Installing fzf..."
echo

rm -rf "${HOME}/.local/share/fzf"
git clone --depth 1 https://github.com/junegunn/fzf.git "${HOME}/.local/share/fzf" \
  && yes | "${HOME}/.local/share/fzf/install" --no-update-rc --xdg

echo
echo "Finished installing fzf!"
echo
}

function install_powerline() {
echo
echo "Installing powerline..."
echo

pip3 install --user powerline-status

echo
echo "Finished installing powerline!"
echo
}

function install_powerlevel10k() {
echo
echo "Installing powerlevel10k..."
echo

rm -rf "${HOME}/.config/zsh/themes/powerlevel10k"
git clone --depth=1 https://github.com/romkatv/powerlevel10k.git "${HOME}/.config/zsh/plugins/powerlevel10k"

echo
echo "Finished installing powerlevel10k!"
echo
}

function change_default_shell() {
chsh -s "$(command -v zsh)"
source "${HOME}/.config/zsh/.zprofile"

cat << EOF
Everything was installed successfully!

You can safely close this terminal.

The next time you open your terminal zsh will be ready to go!
EOF
echo
}

function full_install() {
    verify_os
    prompt_install_system_packages
    prompt_backup_configs
    prompt_clone_dotfiles
    prompt_create_symlinks
    create_xdg_directories
    install_tpm
    install_fzf
    install_powerline
    install_powerlevel10k
    change_default_shell
}

function menu() {
    while true; do
        echo What would you like to do?
        echo "1) Full install"
        echo "2) Backup old configs"
        echo "3) Update dotfiles"
        echo 
        echo "q) Quit"
        echo
        read -rp "Choose an option: " option
        echo
        case "${option}" in
            [1]*)
                full_install
                break;;
            [2]*) 
                prompt_backup_configs
                menu;;
            [3]*)
                prompt_clone_dotfiles
                prompt_create_symlinks
                create_xdg_directories
                menu;;
            [qQ]*)
                echo "Exiting ..."
                exit 0;;
            *) 
                echo "Please enter a valid answer or q to quit";;
        esac
    done
}

menu

exit 0